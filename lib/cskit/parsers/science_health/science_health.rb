# Autogenerated from a Treetop grammar. Edits may be lost.


# encoding: UTF-8

require 'cskit/parsers/science_health/nodes'
require 'cskit/parsers/science_health/objects'

module CSKit
  module Parsers

    module ScienceHealth
      include Treetop::Runtime

      def root
        @root ||= :citation
      end

      module Citation0
        def page
          elements[0]
        end

        def line_list
          elements[4]
        end
      end

      def _nt_citation
        start_index = index
        if node_cache[:citation].has_key?(index)
          cached = node_cache[:citation][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_page
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?('\G[\\s]', true, index)
              r3 = true
              @index += 1
            else
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            if has_terminal?(":", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r4 = nil
            end
            s0 << r4
            if r4
              s5, i5 = [], index
              loop do
                if has_terminal?('\G[\\s]', true, index)
                  r6 = true
                  @index += 1
                else
                  r6 = nil
                end
                if r6
                  s5 << r6
                else
                  break
                end
              end
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              s0 << r5
              if r5
                r7 = _nt_line_list
                s0 << r7
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(CitationNode,input, i0...index, s0)
          r0.extend(Citation0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:citation][start_index] = r0

        r0
      end

      def _nt_page
        start_index = index
        if node_cache[:page].has_key?(index)
          cached = node_cache[:page][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?('\G[\\d{1,3}|vi{2}|xi{1,2}|i{0,1}x]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(PageNode,input, i0...index, s0)
        end

        node_cache[:page][start_index] = r0

        r0
      end

      module LineList0
        def line_list
          elements[3]
        end
      end

      module LineList1
        def line
          elements[0]
        end

      end

      def _nt_line_list
        start_index = index
        if node_cache[:line_list].has_key?(index)
          cached = node_cache[:line_list][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_line
        s0 << r1
        if r1
          i3, s3 = index, []
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[\\s]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s3 << r4
          if r4
            if has_terminal?(",", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(",")
              r6 = nil
            end
            s3 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[\\s]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              s3 << r7
              if r7
                r9 = _nt_line_list
                s3 << r9
              end
            end
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(LineList0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(LineListNode,input, i0...index, s0)
          r0.extend(LineList1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:line_list][start_index] = r0

        r0
      end

      module Line0
      end

      def _nt_line
        start_index = index
        if node_cache[:line].has_key?(index)
          cached = node_cache[:line][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        r2 = _nt_compound_line_number
        if r2
          r1 = r2
        else
          r3 = _nt_line_number
          if r3
            r1 = r3
          else
            @index = i1
            r1 = nil
          end
        end
        s0 << r1
        if r1
          i5 = index
          r6 = _nt_only
          if r6
            r5 = r6
          else
            r7 = _nt_start_fragment
            if r7
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
        if s0.last
          r0 = instantiate_node(LineNode,input, i0...index, s0)
          r0.extend(Line0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:line][start_index] = r0

        r0
      end

      module CompoundLineNumber0
        def line_number1
          elements[0]
        end

        def line_number2
          elements[4]
        end
      end

      def _nt_compound_line_number
        start_index = index
        if node_cache[:compound_line_number].has_key?(index)
          cached = node_cache[:compound_line_number][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_line_number
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?('\G[\\s]', true, index)
              r3 = true
              @index += 1
            else
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            if has_terminal?("-", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("-")
              r4 = nil
            end
            s0 << r4
            if r4
              s5, i5 = [], index
              loop do
                if has_terminal?('\G[\\s]', true, index)
                  r6 = true
                  @index += 1
                else
                  r6 = nil
                end
                if r6
                  s5 << r6
                else
                  break
                end
              end
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              s0 << r5
              if r5
                r7 = _nt_line_number
                s0 << r7
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(CompoundLineNumberNode,input, i0...index, s0)
          r0.extend(CompoundLineNumber0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:compound_line_number][start_index] = r0

        r0
      end

      def _nt_line_number
        start_index = index
        if node_cache[:line_number].has_key?(index)
          cached = node_cache[:line_number][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?('\G[\\d]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(LineNumberNode,input, i0...index, s0)
        end

        node_cache[:line_number][start_index] = r0

        r0
      end

      module Only0
      end

      def _nt_only
        start_index = index
        if node_cache[:only].has_key?(index)
          cached = node_cache[:only][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        s1, i1 = [], index
        loop do
          if has_terminal?('\G[\\s]', true, index)
            r2 = true
            @index += 1
          else
            r2 = nil
          end
          if r2
            s1 << r2
          else
            break
          end
        end
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        s0 << r1
        if r1
          if has_terminal?("(", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("(")
            r3 = nil
          end
          s0 << r3
          if r3
            s4, i4 = [], index
            loop do
              if has_terminal?('\G[\\s]', true, index)
                r5 = true
                @index += 1
              else
                r5 = nil
              end
              if r5
                s4 << r5
              else
                break
              end
            end
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            s0 << r4
            if r4
              if has_terminal?("only", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure("only")
                r6 = nil
              end
              s0 << r6
              if r6
                s7, i7 = [], index
                loop do
                  if has_terminal?('\G[\\s]', true, index)
                    r8 = true
                    @index += 1
                  else
                    r8 = nil
                  end
                  if r8
                    s7 << r8
                  else
                    break
                  end
                end
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                s0 << r7
                if r7
                  if has_terminal?(")", false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(")")
                    r9 = nil
                  end
                  s0 << r9
                  if r9
                    s10, i10 = [], index
                    loop do
                      if has_terminal?('\G[\\s]', true, index)
                        r11 = true
                        @index += 1
                      else
                        r11 = nil
                      end
                      if r11
                        s10 << r11
                      else
                        break
                      end
                    end
                    r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                    s0 << r10
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(OnlyNode,input, i0...index, s0)
          r0.extend(Only0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:only][start_index] = r0

        r0
      end

      def _nt_start_fragment
        start_index = index
        if node_cache[:start_fragment].has_key?(index)
          cached = node_cache[:start_fragment][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?('\G[^,]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(StartFragmentNode,input, i0...index, s0)
        end

        node_cache[:start_fragment][start_index] = r0

        r0
      end

    end

    class ScienceHealthParser < Treetop::Runtime::CompiledParser
      include ScienceHealth
    end


  end
end
